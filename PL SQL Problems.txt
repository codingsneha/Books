1. Insert 10 Rows Using a FOR Loop

-- Creating the example table for inserting data
CREATE TABLE example_table (
    id INT PRIMARY KEY,
    name VARCHAR2(50)
);

-- Using FOR loop to insert 10 rows
BEGIN
   FOR i IN 1..10 LOOP
      INSERT INTO example_table (id, name)
      VALUES (i, 'Name_' || i);
   END LOOP;
   COMMIT;
END;
/






2. Select the Five Highest Paid Employees Using a Cursor

-- Creating the emp table
CREATE TABLE emp (
    emp_id INT PRIMARY KEY,
    emp_name VARCHAR2(100),
    department VARCHAR2(50),
    salary NUMBER,
    position VARCHAR2(50),
    date_of_joining DATE
);

-- Insert sample data into emp table
INSERT INTO emp (emp_id, emp_name, department, salary, position, date_of_joining)
VALUES (1, 'John Doe', 'HR', 5000, 'Manager', TO_DATE('2015-02-01', 'YYYY-MM-DD'));
.
.
.

COMMIT;

-- Cursor to fetch the top 5 highest paid employees
DECLARE
   CURSOR emp_cursor IS
      SELECT emp_id, emp_name, salary
      FROM emp
      ORDER BY salary DESC
      FETCH FIRST 5 ROWS ONLY;
   emp_row emp_cursor%ROWTYPE;
BEGIN
   OPEN emp_cursor;
   LOOP
      FETCH emp_cursor INTO emp_row;
      EXIT WHEN emp_cursor%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE('ID: ' || emp_row.emp_id || ', Name: ' || emp_row.emp_name || ', Salary: ' || emp_row.salary);
   END LOOP;
   CLOSE emp_cursor;
END;
/







3. Sum of Positive and Negative Numbers

-- Creating the numbers_table to store sample numbers
CREATE TABLE numbers_table (
    num INT
);

-- Inserting sample numbers
INSERT INTO numbers_table (num) VALUES (10);
INSERT INTO numbers_table (num) VALUES (-5);
INSERT INTO numbers_table (num) VALUES (20);
INSERT INTO numbers_table (num) VALUES (-3);
INSERT INTO numbers_table (num) VALUES (15);
INSERT INTO numbers_table (num) VALUES (-8);
COMMIT;

-- Query to sum positive and negative numbers
SELECT 
   SUM(CASE WHEN num > 0 THEN num ELSE 0 END) AS positive_sum,
   SUM(CASE WHEN num < 0 THEN num ELSE 0 END) AS negative_sum
FROM numbers_table;





4. Display a String Vertically (Example: "HELLO")

-- Query to display a string vertically
SELECT SUBSTR('HELLO', LEVEL, 1) AS letter
FROM DUAL
CONNECT BY LEVEL <= LENGTH('HELLO');




5. Display All Saturdays and Sundays of a Month


-- Query to display all Saturdays and Sundays of the current month
SELECT TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE, 'MONTH'), 0) + LEVEL - 1, 'DD-MON-YYYY') AS weekend_date
FROM DUAL
WHERE TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE, 'MONTH'), 0) + LEVEL - 1, 'DY') IN ('SAT', 'SUN')
CONNECT BY LEVEL <= LAST_DAY(SYSDATE) - TRUNC(SYSDATE, 'MONTH') + 1;




6. Display Employee with Maximum Salary Department-wise Without Using RANK or DENSE_RANK

-- Query to fetch employee with the maximum salary in each department
SELECT emp_id, emp_name, department, salary
FROM emp e1
WHERE salary = (
   SELECT MAX(salary)
   FROM emp e2
   WHERE e1.department = e2.department
);





7. Difference Between Employee Salary and Maximum Salary Department-wise

-- Query to display salary difference from maximum salary in each department
SELECT 
   emp_id, 
   emp_name, 
   department, 
   salary, 
   (MAX(salary) OVER (PARTITION BY department) - salary) AS salary_difference
FROM emp;




8. Fetch Employees Who Hold a Managerial Position


-- Query to fetch employees who hold a managerial position
SELECT emp_id, emp_name, position
FROM emp
WHERE position = 'Manager';





9. Retrieve Employee Details from EmployeeInfo Table Who Have a Date of Joining in the EmployeePosition Table


-- Creating EmployeeInfo table
CREATE TABLE EmployeeInfo (
    emp_id INT PRIMARY KEY,
    emp_name VARCHAR2(100),
    department VARCHAR2(50),
    date_of_joining DATE
);


-- Creating EmployeePosition table
CREATE TABLE EmployeePosition (
    emp_id INT PRIMARY KEY,
    position VARCHAR2(50),
    date_of_joining DATE
);

-- Inserting sample data into EmployeeInfo table
INSERT INTO EmployeeInfo (emp_id, emp_name, department, date_of_joining)
VALUES (1, 'John Doe', 'HR', TO_DATE('2015-02-01', 'YYYY-MM-DD'));
.
.
.

-- Inserting sample data into EmployeePosition table
INSERT INTO EmployeePosition (emp_id, position, date_of_joining)
VALUES (1, 'Manager', TO_DATE('2015-02-01', 'YYYY-MM-DD'));
.
.
.

COMMIT;

-- Query to fetch employee details who have matching date of joining
SELECT e.emp_id, e.emp_name, e.department, e.date_of_joining
FROM EmployeeInfo e
JOIN EmployeePosition ep ON e.date_of_joining = ep.date_of_joining
WHERE e.emp_id = ep.emp_id;






10. Get the Last Record from a Table

-- Query to fetch the last record based on emp_id
SELECT *
FROM emp
ORDER BY emp_id DESC
FETCH FIRST 1 ROW ONLY;